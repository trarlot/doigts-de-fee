// Code generated by Slice Machine. DO NOT EDIT.

import type * as prismic from "@prismicio/client";

type Simplify<T> = { [KeyType in keyof T]: T[KeyType] };

/**
 * Content for image documents
 */
interface ImageDocumentData {
  /**
   * nail field in *image*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: image.nail
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/field#image
   */
  nail: prismic.ImageField<never>;
}

/**
 * image document from Prismic
 *
 * - **API ID**: `image`
 * - **Repeatable**: `true`
 * - **Documentation**: https://prismic.io/docs/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type ImageDocument<Lang extends string = string> =
  prismic.PrismicDocumentWithUID<Simplify<ImageDocumentData>, "image", Lang>;

/**
 * Content for test documents
 */
interface TestDocumentData {
  /**
   * text field in *test*
   *
   * - **Field Type**: Text
   * - **Placeholder**: *None*
   * - **API ID Path**: test.text
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/field#key-text
   */
  text: prismic.KeyTextField;
}

/**
 * test document from Prismic
 *
 * - **API ID**: `test`
 * - **Repeatable**: `false`
 * - **Documentation**: https://prismic.io/docs/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type TestDocument<Lang extends string = string> =
  prismic.PrismicDocumentWithoutUID<Simplify<TestDocumentData>, "test", Lang>;

export type AllDocumentTypes = ImageDocument | TestDocument;

declare module "@prismicio/client" {
  interface CreateClient {
    (
      repositoryNameOrEndpoint: string,
      options?: prismic.ClientConfig,
    ): prismic.Client<AllDocumentTypes>;
  }

  interface CreateWriteClient {
    (
      repositoryNameOrEndpoint: string,
      options: prismic.WriteClientConfig,
    ): prismic.WriteClient<AllDocumentTypes>;
  }

  interface CreateMigration {
    (): prismic.Migration<AllDocumentTypes>;
  }

  namespace Content {
    export type {
      ImageDocument,
      ImageDocumentData,
      TestDocument,
      TestDocumentData,
      AllDocumentTypes,
    };
  }
}
